import os
from os.path import join, dirname
import sys
if sys.version_info >= (3, 7):
    import zipfile
else:
    import zipfile37 as zipfile
import cv2
import time
import shutil


# class from https://siriarah.wordpress.com/2015/08/06/codigo-morse-em-python/
class Morse(object):
    def __init__(self):
        self.morse_code = {
            'A': '.-', 'B': '-...',
            'C': '-.-.', 'D': '-..',
            'E': '.', 'F': '..-.',
            'G': '--.', 'H': '....',
            'I': '..', 'J': '.---',
            'K': '-.-', 'L': '.-..',
            'M': '--', 'N': '-.',
            'O': '---', 'P': '.--.',
            'Q': '--.-', 'R': '.-.',
            'S': '...', 'T': '-',
            'U': '..-', 'V': '...-',
            'W': '.--', 'X': '-..-',
            'Y': '-.--', 'Z': '--..',
            '0': '-----', '1': '.----',
            '2': '..---', '3': '...--',
            '4': '....-', '5': '.....',
            '6': '-....', '7': '--...',
            '8': '---..', '9': '----.'
        }
 
    def decode(self, morsecode):
        ''' Decodifica codigo morse '''
        code = morsecode.split(' ')
        text = ''
        for item in code:
            for key, value in self.morse_code.items(): # modificado
                if item == value:
                    text += key
                    break
        return text
 
    def encode(self, plaintext):
        ''' Codifica em codigo morse '''
        code = ''
        for char in plaintext.upper():
            if char in self.morse_code.keys():
                code += self.morse_code[char] + ' '
        return code

def extract_password(img):
    imagem = cv2.imread('pwd.png')
    #cv2.imshow("Original", imagem)

    (bmc, gmc, rmc) = imagem[1, 1]
    #print("Cor do pixel em (250, 305) - Vermelho: %d, Verde: %d, Azul: %d" % (rmc, gmc, bmc))
 
    height = imagem.shape[0]
    width = imagem.shape[1]

    #print("Altura (height): %d pixels" % (imagem.shape[0]))
    #print("Largura (width): %d pixels" % (imagem.shape[1]))

    password = ''
    for h in range(height):
        if h % 2:
            code_morse = ''
            #print(' \\0.0/ height is %s' % h)
            for w in range(width):
                (b, g, r) = imagem[h, w]
                if (bmc == b) and (gmc == g) and (rmc == r):
                    code_morse += '-'
                else:
                    code_morse += ' '
            code_morse_final = []
            for code in code_morse.split(' '):
                if code == '': continue
                if code == '-': code = '.'
                if code == '---': code = '-'
                code_morse_final.append(code)
            print(''.join(code_morse_final))
            morse = Morse()
            password += morse.decode(''.join(code_morse_final))

    return password

def extract(filename, password):
    with zipfile.ZipFile(join(dirname(__file__), filename)) as Zip:
        Zip.setpassword(password)
        for Zip_info in Zip.infolist():
            if Zip_info.filename[-1] == '/':
                continue
            Zip_info.filename = os.path.basename(Zip_info.filename)
            Zip.extract(Zip_info, dirname(__file__))
    return filename


if __name__ == '__main__':
    # http://www.galirows.com.br/meublog/blog/basico-opencv-python-mostrar-imagem/

    old_zip = ''
    descompact_zip = ''
    password = b'9'
    name_img = ''
    counter = 0

    while True:
        for _, _, filename in os.walk(dirname(__file__)):
            for x in filename:
                if '.zip' == x[-4:]:
                    descompact_zip = x

        if descompact_zip == '':
            print(' - acabou, eu acho...')
            break

        old_zip = extract(descompact_zip, password)

        for _, _, filename in os.walk(dirname(__file__)):
            for x in filename:
                if '.png' == x[-4:]:
                    name_img = x

        if name_img == '':
            print(' - acabou... eu acho né...')
            break

        password = bytes(extract_password(name_img).lower(), 'utf-8')
        print('senha do arquivo %s é %s' % (old_zip, password))

        os.rename(name_img, name_img+str(counter))
        os.rename(old_zip, old_zip+str(counter))

        shutil.move(name_img+str(counter), "./tmp")
        shutil.move(old_zip+str(counter), "./tmp")

        counter+=1

        # time.sleep(1)
